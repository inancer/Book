"use strict";(self.webpackChunkdocumentation_book=self.webpackChunkdocumentation_book||[]).push([[7575],{3905:function(e,a,r){r.d(a,{Zo:function(){return m},kt:function(){return k}});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=n.createContext({}),u=function(e){var a=n.useContext(p),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},m=function(e){var a=u(e.components);return n.createElement(p.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},s=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=u(r),k=t,c=s["".concat(p,".").concat(k)]||s[k]||d[k]||i;return r?n.createElement(c,l(l({ref:a},m),{},{components:r})):n.createElement(c,l({ref:a},m))}));function k(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,l=new Array(i);l[0]=s;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:t,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},3581:function(e,a,r){r.r(a),r.d(a,{assets:function(){return m},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var n=r(7462),t=r(3366),i=(r(7294),r(3905)),l=["components"],o={},p="RxSwift",u={unversionedId:"iOS/RxSwift/Introduction",id:"iOS/RxSwift/Introduction",title:"RxSwift",description:"RX",source:"@site/docs/iOS/RxSwift/Introduction.md",sourceDirName:"iOS/RxSwift",slug:"/iOS/RxSwift/Introduction",permalink:"/docs/iOS/RxSwift/Introduction",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/iOS/RxSwift/Introduction.md",tags:[],version:"current",frontMatter:{},sidebar:"iOSsidebar",previous:{title:"Async Await",permalink:"/docs/iOS/Swift/AsyncAwait"},next:{title:"Introduction",permalink:"/docs/iOS/SwiftUI/Introduction"}},m={},d=[],s={toc:d};function k(e){var a=e.components,o=(0,t.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},s,o,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rxswift"},"RxSwift"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"RX")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Operat\xf6rler")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://reactivex.io/documentation/operators.html#combining"},(0,i.kt)("strong",{parentName:"a"},"http://reactivex.io/documentation/operators.html#combining"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"combineLatest -> 2 veya daha fazla, farkl\u0131 veya ayn\u0131 tipte observable\u2019\u0131n ",(0,i.kt)("strong",{parentName:"p"},"i\xe7lerinden birinin de\u011fi\u015fmesi durumunda")," kombine \u015fekilde ",(0,i.kt)("strong",{parentName:"p"},"ayn\u0131 anda")," d\xf6nd\xfcr\xfclmesi (Ba\u015flang\u0131\xe7ta ikisininde de\u011fi\u015fmesi gerekir.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"withLatestFrom -> CombineLatest ile ayn\u0131 fakat bunda 2. de\u011ferin de\u011fi\u015fmesinde de\u011fil sadece 1. de\u011ferin de\u011fi\u015fmesi durumunda yay\u0131n yap\u0131l\u0131r. 2. de\u011ferin ise son de\u011feri verilir. (Ba\u015flang\u0131\xe7ta ikisininde de\u011fi\u015fmesi gerekir.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Merge -> 2 veya daha fazla ayn\u0131 tipte olan observable\u2019\u0131n merge\u2019lenip ",(0,i.kt)("strong",{parentName:"p"},"bir tanesi de\u011fi\u015ftik\xe7e tek bir de\u011fer \u015feklinde")," anl\u0131k olarak s\u0131rayla d\xf6nd\xfcr\xfclmesi (Yani tek observable gibi davranmas\u0131) (ba\u015flang\u0131\xe7ta 1 tanesinin de\u011fi\u015fmesi yeterli)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Zip -> 2 veya daha fazla, farkl\u0131 veya ayn\u0131 tipte observable\u2019\u0131n ziplenerek, ",(0,i.kt)("strong",{parentName:"p"},"her ikisinin de de\u011ferinin de\u011fi\u015fti\u011fi")," durumda ",(0,i.kt)("strong",{parentName:"p"},"ayn\u0131 anda")," d\xf6nd\xfcr\xfclmesi (s\u0131ras\u0131yla gelir bkz ",(0,i.kt)("a",{parentName:"p",href:"http://reactivex.io/documentation/operators/zip.html"},"http://reactivex.io/documentation/operators/zip.html"),") Ba\u015flang\u0131\xe7ta ikisininde de\u011fi\u015fmesi gerekir.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"amb -> ilk gelen observer kapar. Di\u011ferlerini dinlemez.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Concat -> \xd6nce ilk observable'\u0131n verileri sonra ikinci.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"flatMap -> i\xe7erisinde tan\u0131mlanan Observable\u2019a map eder. ba\u011fl\u0131 oldu\u011fu observable her tetiklendi\u011finde, i\xe7inde tan\u0131mlanan observable\u2019dan 1 tane daha olu\u015fur. \xd6rnek: flatMap i\xe7inde Timer varsa ba\u011fl\u0131 oldu\u011fu observable\u2019a her yeni event geldi\u011finde yenisi yani +1 timer daha eklenecek b\xf6ylelikle 1\u2019den fazla timer olu\u015fmu\u015f olacak. (First ve latest kat\u0131lan yeni observable\u2019lara g\xf6re ilkini veya son geleni kullanmaya yar\u0131yor)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"flatMapLatest -> i\xe7erisinde tan\u0131mlanan Observable\u2019a map eder. \xd6rnek: flatMap i\xe7inde Timer varsa ba\u011fl\u0131 oldu\u011fu observable\u2019a yeni event geldi\u011finde bir \xf6nceki dispose olur. b\xf6ylelikle dublicate olmaz.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"throttle -> due time gelince son de\u011feri basar")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"debounce -> due time de\u011fer de\u011fi\u015ftik\xe7e resetlenir.\xa0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"distinctUntilChanged -> Dublicate\u2019i \xf6nler. Sadece de\u011fer de\u011fi\u015fti\u011finde iletir.\xa0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"startWith -> emit etmeden \xf6nce manuel bir de\u011fer g\xf6ndermek i\xe7in")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"share -> SharingStrategy\u2019i belirlemek i\xe7in kullan\u0131lan operat\xf6rd\xfcr. her listener i\xe7in tek bir ba\u011flant\u0131 m\u0131 yoksa \xe7oklu ba\u011flant\u0131 m\u0131 olu\u015fturulaca\u011f\u0131 konusunda davran\u0131\u015f\u0131 ayarlar. \xd6rnek: X observable\u2019\u0131 var ve 3 tane ayr\u0131 ayr\u0131 dinleyen sequence var. 3\u2019\xfc i\xe7in ayr\u0131 ayr\u0131 emit edebilir. o y\xfczden share ile hepsine tek ba\u011flant\u0131 ayarlanmas\u0131 sa\u011flanabilir.(.whileConnected) veya ayr\u0131 ayr\u0131 yap\u0131labilir.(.forever) (replay ile son de\u011ferden ka\xe7 tanesi korunaca\u011f\u0131 girilebilir. b\xf6ylece her yeni ba\u011flant\u0131 kuruldu\u011funda son de\u011fer dinlenebilir.)"))),(0,i.kt)("p",null,"(ESK\u0130 A\xc7IKLAMA: Her bir ba\u011flant\u0131da sequence olu\u015fur ve completed atar. sonra tekrar ba\u011flan\u0131l\u0131r ve tekrar completed atar. (davran\u0131\u015f\u0131 vs i\xe7in parametreler kullan\u0131l\u0131r.) (replay:\xa0 subscribe olundu\u011funda, subscription \xf6ncesinde gelen de\u011ferlerden en son ka\xe7 tanesinin observer\u2019a verilece\u011fi belirlenir, scope:\xa0 .whileConnected(her bir observer connection\u2019\u0131 i\xe7in farkl\u0131 ",(0,i.kt)("em",{parentName:"p"},"subject"),"\u2019ler olu\u015fur. her ba\u011flant\u0131 birbirinden izoledir.), .forever(tek bir subject vard\u0131r. ba\u011flant\u0131lar izole de\u011fildir tek bir ba\u011flant\u0131 gibi davran\u0131l\u0131r.) (bkz: SubjectLifetimeScope)))"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Operat\xf6rler kendileri main thread\u2019te serial bir \u015fekilde \xe7al\u0131\u015f\u0131rlar. Fakat kendimiz y\xf6nlendirebiliriz. Request att\u0131\u011f\u0131nda ise otomatik olarak ayr\u0131 bir thread\u2019te \xe7al\u0131\u015f\u0131r. Bind gibi drive gibi operat\xf6rler ise otomatik \u015fekilde main thread\u2019e aktar\u0131rlar."),(0,i.kt)("li",{parentName:"ul"},"scan: ",(0,i.kt)("strong",{parentName:"li"},"swift\u2019teki")," reduce gibi \xe7al\u0131\u015f\u0131r iterasyon ile \xf6nceki de\u011fer ve yeni de\u011fer ile toplama, \xe7arpma vs gibi bir mant\u0131k ile manuplasyona f\u0131rsat verir. ve tek tek d\xf6ner"),(0,i.kt)("li",{parentName:"ul"},"reduce scanin ayn\u0131s\u0131d\u0131r fakan sequence dispose oldu\u011funda sadece son de\u011feri verir.")),(0,i.kt)("p",null,"Schedular"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"subscribeOn -> subscription i\u015fleminde.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"observedOn -> Kal\u0131c\u0131 olarak eventlerin ko\u015faca\u011f\u0131 threadi belirler.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"MainScheduler"),": Bu zamanlay\u0131c\u0131 genellikle\xa0",(0,i.kt)("strong",{parentName:"p"},"UI"),"\xa0i\u015flemlerinde kulland\u0131\u011f\u0131m\u0131z main thread zamanlay\u0131c\u0131s\u0131d\u0131r.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"CurrentThreadScheduler"),": Default olarak kullan\u0131lan zamanlay\u0131c\u0131.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"SerialDispatchQueueScheduler"),":\xa0E\u015fzamanl\u0131 bir g\xf6nderme kuyru\u011fu ge\xe7se bile, seri bir haale d\xf6n\xfc\u015ft\xfcren zamanlay\u0131c\u0131.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ConcurrentDispatchQueueScheduler"),":\xa0\xa0Baz\u0131 i\u015flerin arka planda yap\u0131lmas\u0131 gerekti\u011finde uygun olan zamanlay\u0131c\u0131.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"OperationQueueScheduler"),":\xa0Bu zamanlay\u0131c\u0131, arka planda yap\u0131lmas\u0131 gereken baz\u0131 b\xfcy\xfck i\u015f par\xe7alar\u0131n\u0131n oldu\u011fu durumlarda ve maxConcurrentOperationCount kullan\u0131larak e\u015fzamanl\u0131 i\u015fleme ince ayar yapmak istedi\u011finiz durumlarda uygun olan zamanlay\u0131c\u0131.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Queue"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Queue\u2019lar Thread\u2019leri kullanarak \xe7al\u0131\u015f\u0131r. \u0130\u015f listesi olarak d\xfc\u015f\xfcn\xfclebilir. Bir thread\u2019te farkl\u0131 queue\u2019lar olabilir. \xd6rn Sync bir \u015fekilde main thread\u2019te queue olu\u015fturulabilir.\xa0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Hem yeni queue hem de Async kullanmad\u0131k\xe7a yeni thread olu\u015fmaz."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Traits")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Single -> Tek bir obje veya hata"),(0,i.kt)("li",{parentName:"ul"},"Completable -> Sadece tamamland\u0131 veya hata olu\u015ftu bilgisi"),(0,i.kt)("li",{parentName:"ul"},"Maybe -> Single ve Completable kar\u0131\u015f\u0131m\u0131, bir element, completion veya bir hata, Bir element payla\u015fabilir ama payla\u015fmas\u0131n\u0131 gerektirmeyen durumlarda olabilirse kullan\u0131l\u0131r.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Tan\u0131m")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Observable -> (G\xf6zlemlenebilir) Yay\u0131m yapan yap\u0131lar. Bir de\u011fi\u015fiklik oldu\u011funda yeni de\u011feri yay\u0131mlar. (ObservableConvertableType -> ObservableType -> Observable)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Observer -> (G\xf6zlemci) Subscriberlar. RX\u2019te ObserverType\u2019tan t\xfcreyen yap\u0131lard\u0131r. Observablelar\u0131 dinyelen yap\u0131lard\u0131r.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"AnyObserver -> Generic olanlar\u0131na denir.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"base -> RX fonksiyonun tan\u0131mland\u0131\u011f\u0131 Objelere(\xd6rn: ViewControllerlarda) RX fonksiyonlar\u0131 i\xe7inden eri\u015fmek i\xe7in kullan\u0131lan de\u011fi\u015fkendir.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"rx -> Reactive \xf6zelli\u011fi olan objelerin rx \xf6zelli\u011fine eri\u015fim i\xe7in kullan\u0131lan protocold\xfcr(ReactiveCompatible).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Driver -> Main thread\u2019te sequence olu\u015fur. Yani s\xfcrekli binding yapar. t an\u0131nda ba\u011flant\u0131 sa\u011flan\u0131rsa son de\u011fer ",(0,i.kt)("strong",{parentName:"p"},"okunabilir"),". (SharedSequenceConvertibleType -> SharedSequence -> Driver)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Signal -> Main thread\u2019te sequence olu\u015fur. Yani s\xfcrekli binding yapar. t an\u0131nda ba\u011flant\u0131 sa\u011flan\u0131rsa son de\u011fer ",(0,i.kt)("strong",{parentName:"p"},"okunamaz"),".\xa0 (SharedSequenceConvertibleType -> SharedSequence -> Signal)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SharedSequenceConvertibleType -> SharedSequence yaratabilmek i\xe7in gereken protocol (i\xe7erisinde nas\u0131l payla\u015f\u0131m yap\u0131laca\u011f\u0131na dair strateji belirlenebilir. \xd6rnek DriverSharingStrategy, SignalSharingStrategy)"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subjects")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PublishSubject -> Bo\u015f sequence ile ba\u015flar. sadece yeni element\u2019leri emit eder.(Subscriber subscribe olmadan \xf6nce verilen de\u011ferler bir i\u015fe yaramaz.) (Gazete aboneli\u011fi gibi d\xfc\u015f\xfcn\xfclebilir. Abone olduktan sonra x an\u0131nda gelen haberleri al\u0131rs\u0131n \xf6ncesini de\u011fil.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"BehaviorSubject -> Ba\u015flang\u0131\xe7 veya son de\u011feri emit etme ile ba\u015flar.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ReplaySubject -> Bo\u015f ba\u015flar. Bir buffer vard\u0131r. Yani subscription \xf6ncesinde 3 de\u011fer atand\u0131ysa subscriber geldi\u011finde belirlenen buffer kadar de\u011feri s\u0131ras\u0131yla g\xf6nderir.",(0,i.kt)("inlineCode",{parentName:"p"},"(ReplaySubject<String>.create(bufferSize: 2))"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"BehaviorRelay -> BehaviorSubject in wrapped hali. error ve completed eventleri gelmez. (Eski hali Variable) (Combine kar\u015f\u0131l\u0131 @State) (value de\u011ferine .value ile ula\u015f\u0131labilir.)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"hot observable - direkt ba\u015fl\u0131yor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"cold observable - observer\u2019\u0131 bekliyor"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://medium.com/@_achou/rxswift-share-vs-replay-vs-sharereplay-bea99ac42168"},"https://medium.com/@_achou/rxswift-share-vs-replay-vs-sharereplay-bea99ac42168")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"counting.png",src:r(3330).Z,width:"1886",height:"654"})))}k.isMDXComponent=!0},3330:function(e,a,r){a.Z=r.p+"assets/images/counting-f957f3c345f879b3abc4b7ed599fc24d.png"}}]);