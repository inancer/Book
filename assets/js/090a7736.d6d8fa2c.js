"use strict";(self.webpackChunkdocumentation_book=self.webpackChunkdocumentation_book||[]).push([[4767],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(t),d=o,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4072:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={},s=void 0,u={unversionedId:"iOS/SwiftUI/Concurrency/Concurrency",id:"iOS/SwiftUI/Concurrency/Concurrency",title:"Concurrency",description:"WWDC21 - Discover Concurrency in SwiftUI",source:"@site/docs/iOS/SwiftUI/Concurrency/Concurrency.md",sourceDirName:"iOS/SwiftUI/Concurrency",slug:"/iOS/SwiftUI/Concurrency/",permalink:"/Book/docs/iOS/SwiftUI/Concurrency/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/iOS/SwiftUI/Concurrency/Concurrency.md",tags:[],version:"current",frontMatter:{}},l={},p=[],f={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"WWDC21 - Discover Concurrency in SwiftUI")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"/// An observable object representing a random list of space photos.\n@MainActor\nclass Photos: ObservableObject {\n    @Published private(set) var items: [SpacePhoto] = []\n\n    /// Updates `items` to a new, random list of `SpacePhoto`.\n    func updateItems() async {\n        let fetched = await fetchPhotos()\n        items = fetched\n    }\n\n    /// Fetches a new, random list of `SpacePhoto`.\n    func fetchPhotos() async -> [SpacePhoto] {\n        var downloaded: [SpacePhoto] = []\n        for date in randomPhotoDates() {\n            let url = SpacePhoto.requestFor(date: date)\n            if let photo = await fetchPhoto(from: url) {\n                downloaded.append(photo)\n            }\n        }\n        return downloaded\n    }\n\n    /// Fetches a `SpacePhoto` from the given `URL`.\n    func fetchPhoto(from url: URL) async -> SpacePhoto? {\n        do {\n            let (data, _) = try await URLSession.shared.data(from: url)\n            return try SpacePhoto(data: data)\n        } catch {\n            return nil\n        }\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'struct CatalogView: View {\n    @StateObject private var photos = Photos()\n\n    var body: some View {\n        NavigationView {\n            List {\n                ForEach(photos.items) { item in\n                    PhotoView(photo: item)\n                        .listRowSeparator(.hidden)\n                }\n            }\n            .navigationTitle("Catalog")\n            .listStyle(.plain)\n            .refreshable {\n                await photos.updateItems()\n            }\n        }\n        .task {\n            await photos.updateItems()\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"struct PhotoView: View {\n    var photo: SpacePhoto\n\n    var body: some View {\n        ZStack(alignment: .bottom) {\n            AsyncImage(url: photo.url) { image in\n                image\n                    .resizable()\n                    .aspectRatio(contentMode: .fill)\n            } placeholder: {\n                ProgressView()\n            }\n            .frame(minWidth: 0, minHeight: 400)\n\n            HStack {\n                Text(photo.title)\n                Spacer()\n                SavePhotoButton(photo: photo)\n            }\n            .padding()\n            .background(.thinMaterial)\n        }\n        .background(.thickMaterial)\n        .mask(RoundedRectangle(cornerRadius: 16))\n        .padding(.bottom, 8)\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'struct SavePhotoButton: View {\n    var photo: SpacePhoto\n    @State private var isSaving = false\n\n    var body: some View {\n        Button {\n            Task {\n                isSaving = true\n                await photo.save()\n                isSaving = false\n            }\n        } label: {\n            Text("Save")\n                .opacity(isSaving ? 0 : 1)\n                .overlay {\n                    if isSaving {\n                        ProgressView()\n                    }\n                }\n        }\n        .disabled(isSaving)\n        .buttonStyle(.bordered)\n    }\n}\n')))}d.isMDXComponent=!0}}]);