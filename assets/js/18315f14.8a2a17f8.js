"use strict";(self.webpackChunkdocumentation_book=self.webpackChunkdocumentation_book||[]).push([[4249],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(t),p=i,f=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return t?a.createElement(f,o(o({ref:n},d),{},{components:t})):a.createElement(f,o({ref:n},d))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1441:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],l={},s="What's New in SwiftUI WWDC2021",c={unversionedId:"iOS/SwiftUI/WhatsNew21/Summary",id:"iOS/SwiftUI/WhatsNew21/Summary",title:"What's New in SwiftUI WWDC2021",description:"Subpages",source:"@site/docs/iOS/SwiftUI/WhatsNew21/Summary.md",sourceDirName:"iOS/SwiftUI/WhatsNew21",slug:"/iOS/SwiftUI/WhatsNew21/Summary",permalink:"/Book/docs/iOS/SwiftUI/WhatsNew21/Summary",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/iOS/SwiftUI/WhatsNew21/Summary.md",tags:[],version:"current",frontMatter:{},sidebar:"iOSsidebar",previous:{title:"Declarative UI",permalink:"/Book/docs/iOS/SwiftUI/WhatsNew21/DeclarativeUI"}},d={},u=[{value:"1. Binding",id:"1-binding",level:2},{value:"2. Swipe Actions",id:"2-swipe-actions",level:2},{value:"3. Coredata Tables (Mac Only)",id:"3-coredata-tables-mac-only",level:2},{value:"4. Sectioned Fetched Request",id:"4-sectioned-fetched-request",level:2},{value:"4. Search",id:"4-search",level:2},{value:"5. Safe Area Inset",id:"5-safe-area-inset",level:2},{value:"5. Markdown Support",id:"5-markdown-support",level:2},{value:"Custom Markdown",id:"custom-markdown",level:3},{value:"6. Localization",id:"6-localization",level:2},{value:"7. Dynamic Type",id:"7-dynamic-type",level:2},{value:"8. Text Selection",id:"8-text-selection",level:2},{value:"9. Formatting",id:"9-formatting",level:2},{value:"Text Formatting",id:"text-formatting",level:3},{value:"Text Feld Formatting",id:"text-feld-formatting",level:3},{value:"Text Field Prompts and Labels",id:"text-field-prompts-and-labels",level:3},{value:"10. Text Field Submission",id:"10-text-field-submission",level:2},{value:"Submit Label",id:"submit-label",level:3},{value:"11. Keyboard Toolbar",id:"11-keyboard-toolbar",level:2},{value:"12. Focus State",id:"12-focus-state",level:2},{value:"13. Buttons",id:"13-buttons",level:2},{value:"Confirmation Dialog",id:"confirmation-dialog",level:3},{value:"14. Control Group: back/forward control",id:"14-control-group-backforward-control",level:2}],m={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"whats-new-in-swiftui-wwdc2021"},"What's New in SwiftUI WWDC2021"),(0,r.kt)("p",null,"Subpages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/Book/docs/iOS/SwiftUI/WhatsNew21/DeclarativeUI"},"Declarative UI"))),(0,r.kt)("h1",{id:"summary"},"Summary"),(0,r.kt)("h2",{id:"1-binding"},"1. Binding"),(0,r.kt)("p",null,"With binding collection to list, SwiftUI pass the elements one by one and you may use the value just like you used to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"// Interactive collections\n\nstruct DirectionsList: View {\n\xa0 \xa0 @Binding var directions: [Direction]\n\n\xa0 \xa0 var body: some View {\n\xa0 \xa0 \xa0 \xa0 List (directions) { $direction in\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Label {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Text(direction.text)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 } icon: {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 DirectionsIcon(direction)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 }\n}\n")),(0,r.kt)("p",null,"Add interactive controls like a textfield, using the normal binding syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// Interactive collections\n\nstruct DirectionsList: View {\n\n\xa0 \xa0 @Binding var directions: [Direction]\n\n\xa0 \xa0 var body: some View {\n\xa0 \xa0 \xa0 \xa0 List (directions) { $direction in\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Label {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 TextField("Instructions", text: direction.text)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 } icon: {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 DirectionsIcon(direction)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 .listRowSeparatorTint(direction.color)\n\xa0 \xa0 \xa0 \xa0 \xa0 //\xa0 .listRowSeparator(.hidden)\n\xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 }\n}\n')),(0,r.kt)("h2",{id:"2-swipe-actions"},"2. Swipe Actions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// Swipe actions\n\nForEach ($characters) { $character in\n\n    CharacterProfile(character)\n\n    swipeActions(edge: .leading) {\n        Button {\n            withAnimation {\n                character.isPinned.toggle()\n            }\n        } label: {\n            if character.isPinned {\n                Label ("Unpin", systemImage: "pin.slash")\n            } else {\n                Label("Pin", systemImage: "pin")\n            }\n        }\n        .tint( .yellow)\n    }\n\n    swipeActions (edge :.trailing) {\n    ...\n    }\n}\n')),(0,r.kt)("h2",{id:"3-coredata-tables-mac-only"},"3. Coredata Tables (Mac Only)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'@FetchRequest(sortDescriptors: [SortDescriptor(\\.name)])\nprivate var characters: FetchedResults<StoryCharacter>\n@State private var selection = Set<StoryCharacter.ID>()\n\nTable(characters, selection: $selection, sortOrder: $characters.sortDescriptors) {\n  TableColumn("\udbc1\udfc8") { CharacterIcon($0) }\n    .width(20)\n  TableColumn("Villain") { Text($0.isVillain ? "Villain" : "Hero") }\n    .width(40)\n  TableColumn("Name", value: \\.name)\n  TableColumn("Powers", value: \\.powers)\n}\n')),(0,r.kt)("h2",{id:"4-sectioned-fetched-request"},"4. Sectioned Fetched Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'@SectionedFetchRequest(\n  sectionIdentifier: \\.isPinned,\n  sortDescriptors: [\n    SortDescriptor(\\.isPinned, order: .reverse),\n    SortDescriptor(\\.lastModified)\n  ],\n  animation: .default)\nprivate var characters: SectionedFetchResults<...>\n\nList {\n  ForEach(characters) { section in\n    Section(section.id ? "Pinned" : "Heroes & Villains") {\n      ForEach(section) { character in\n        CharacterRowView(character)\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"4-search"},"4. Search"),(0,r.kt)("p",null,"For more info: Craft search experiences in SwiftUI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'  var body: some View {\n    NavigationView {\n      List {\n        if characters.filterText.isEmpty {\n          if !characters.pinned.isEmpty {\n            Section("Pinned") {\n              sectionContent(for: characters.pinned)\n            }\n          }\n          Section("Heroes & Villains") {\n            sectionContent(for: characters.unpinned)\n          }\n        } else {\n          sectionContent(for: characters.filtered)\n        }\n      }\n      .listStyle(.sidebar)\n      .searchable(text: $characters.filterText)\n      .navigationTitle("Characters")\n    }\n  }\n')),(0,r.kt)("h2",{id:"5-safe-area-inset"},"5. Safe Area Inset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct ContentView: View {\n    let newSymbols = Array(repeating: Symbol("swift"), count: 645)\n    let systemColors: [Color] = [.red, .orange, .yellow, .green, .mint, .teal, .cyan, .blue, .indigo, .purple, .pink, .gray, .brown]\n\n    var body: some View {\n        ScrollView {\n            symbolGrid\n        }\n        .safeAreaInset(edge: .bottom, spacing: 0) {\n            VStack(spacing: 0) {\n                Divider()\n                VStack(spacing: 0) {\n                    Text("\\(newSymbols.count) new symbols")\n                        .foregroundStyle(.primary)\n                        .font(.body.bold())\n                    Text("\\(systemColors.count) system colors")\n                        .foregroundStyle(.secondary)\n                }\n                .padding()\n            }\n            .background(.regularMaterial)\n        }\n    }\n\n    var symbolGrid: some View {\n        LazyVGrid(columns: [.init(.adaptive(minimum: 40, maximum: 40))]) {\n            ForEach(0 ..< newSymbols.count, id: \\.self) { index in\n                newSymbols[index].image\n                    .foregroundStyle(.white)\n                    .frame(width: 40, height: 40)\n                    .background(systemColors[index % systemColors.count])\n            }\n        }\n        .padding()\n    }\n}\n\nstruct Symbol: Identifiable {\n    let name: String\n    init(_ name: String) { self.name = name }\n\n    var image: Image { Image(systemName: name) }\n    var id: String { name }\n}\n')),(0,r.kt)("h2",{id:"5-markdown-support"},"5. Markdown Support"),(0,r.kt)("h3",{id:"custom-markdown"},"Custom Markdown"),(0,r.kt)("p",null,"FMI: Checkout  ",(0,r.kt)("inlineCode",{parentName:"p"},"Whats new in foundation?")),(0,r.kt)("h2",{id:"6-localization"},"6. Localization"),(0,r.kt)("p",null,"FMI: Checkout  ",(0,r.kt)("inlineCode",{parentName:"p"},"Localize your swiftUI app?")),(0,r.kt)("h2",{id:"7-dynamic-type"},"7. Dynamic Type"),(0,r.kt)("h2",{id:"8-text-selection"},"8. Text Selection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"VStack(alignment: .leading, spacing: 0) {\n    ActivityHeader(activity)\n    Divider()\n    Text(activity.info)\n        .textSelection(.enabled)\n        .padding()\n    Spacer()\n}\n.background()\n.navigationTitle(activity.name)\n        \n")),(0,r.kt)("h2",{id:"9-formatting"},"9. Formatting"),(0,r.kt)("h3",{id:"text-formatting"},"Text Formatting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var body: some View {\n    Text(activity.people\n    .map(\\.nameComponents)\n    .formatted(\n        .list(memberStyle:.name(style: .short), type: .and))\n        )\n        .scenePadding()\n}\n")),(0,r.kt)("h3",{id:"text-feld-formatting"},"Text Feld Formatting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var body: some View {\n   TextField("New Person", value: $newAttendee,\n      format: .name(style: .medium))\n}\n')),(0,r.kt)("h3",{id:"text-field-prompts-and-labels"},"Text Field Prompts and Labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var body: some View {\n    Form {\n        TextField("Name:", text: $activity.name, prompt: Text("New Activity"))\n        TextField("Location:", text: $activity.location)\n        DatePicker("Date:", selection: $activity.date)\n    }\n    .frame(minWidth: 250)\n    .padding()\n}\n')),(0,r.kt)("h2",{id:"10-text-field-submission"},"10. Text Field Submission"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var body: some View {\n    TextField("New Person", value: $newAttendee,\n        format: .name(style: .medium)\n    )\n    .onSubmit {\n        activity.append(Person(newAttendee))\n        newAttendee = PersonNameComponents()\n    }\n}\n')),(0,r.kt)("h3",{id:"submit-label"},"Submit Label"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var body: some View {\n    TextField("New Person", value: $newAttendee,\n        format: .name(style: .medium)\n    )\n    .onSubmit {\n        activity.append(Person(newAttendee))\n        newAttendee = PersonNameComponents()\n    }\n    .submitLabel(.done)\n}\n')),(0,r.kt)("h2",{id:"11-keyboard-toolbar"},"11. Keyboard Toolbar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct ContentView: View {\n    @State private var activity: Activity = .sample\n    @FocusState private var focusedField: Field?\n\n    var body: some View {\n        Form {\n            TextField("Name", text: $activity.name, prompt: Text("New Activity"))\n            TextField("Location", text: $activity.location)\n            DatePicker("Date", selection: $activity.date)\n        }\n        .toolbar {\n            ToolbarItemGroup(placement: .keyboard) {\n                Button(action: selectPreviousField) {\n                    Label("Previous", systemImage: "chevron.up")\n                }\n                .disabled(!hasPreviousField)\n\n                Button(action: selectNextField) {\n                    Label("Next", systemImage: "chevron.down")\n                }\n                .disabled(!hasNextField)\n            }\n        }\n    }\n\n    private func selectPreviousField() {\n       focusedField = focusedField.map {\n          Field(rawValue: $0.rawValue - 1)!\n       }\n    }\n\n    private var hasPreviousField: Bool {\n        if let currentFocusedField = focusedField {\n            return currentFocusedField.rawValue > 0\n        } else {\n            return false\n        }\n    }\n\n    private func selectNextField() {\n       focusedField = focusedField.map {\n          Field(rawValue: $0.rawValue + 1)!\n       }\n    }\n\n    private var hasNextField: Bool {\n        if let currentFocusedField = focusedField {\n            return currentFocusedField.rawValue < Field.allCases.count\n        } else {\n            return false\n        }\n    }\n}\n\nprivate enum Field: Int, Hashable, CaseIterable {\n   case name, location, date, addAttendee\n}\n')),(0,r.kt)("h2",{id:"12-focus-state"},"12. Focus State"),(0,r.kt)("p",null,"FMI ",(0,r.kt)("inlineCode",{parentName:"p"},"Direct and reflect focus in SwiftUI")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'private enum Field: Int, Hashable, CaseIterable {\n   case name, location, date, addAttendee\n}\n\nstruct ContentView: View {\n    @State private var activity: Activity = .sample\n    @State private var newAttendee = PersonNameComponents()\n    @FocusState private var focusedField: Field?\n\n    var body: some View {\n        VStack {\n            Form {\n                TextField("Name:", text: $activity.name, prompt: Text("New Activity"))\n                    .focused($focusedField, equals: .name)\n                TextField("Location:", text: $activity.location)\n                    .focused($focusedField, equals: .location)\n                DatePicker("Date:", selection: $activity.date)\n                    .focused($focusedField, equals: .date)\n            }\n\n            VStack(alignment: .leading) {\n                TextField("New Person", value: $newAttendee, format: .name(style: .medium))\n                    .focused($focusedField, equals: .addAttendee)\n\n                ControlGroup {\n                    Button {\n                        focusedField = .addAttendee\n                    } label: {\n                       Label("Add Attendee", systemImage: "plus")\n                    }\n                }\n                .fixedSize()\n            }\n        }\n        .frame(minWidth: 250)\n        .scenePadding()\n    }\n    \n    func endEditing() {\n        focusedField = nil\n    }\n}\n')),(0,r.kt)("h2",{id:"13-buttons"},"13. Buttons"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct ContentView: View {\n    var body: some View {\n        VStack {\n            Button(action: addToJar) {\n                Text("Add to Jar").frame(maxWidth: 300)\n            }\n            .controlProminence(.increased)\n            .keyboardShortcut(.defaultAction)\n\n            Button(action: addToWatchlist) {\n                Text("Add to Watchlist").frame(maxWidth: 300)\n            }\n            .tint(.accentColor)\n        }\n        .buttonStyle(.bordered)\n        .controlSize(.large)\n    }\n\n    private func addToJar() {}\n    private func addToWatchlist() {}\n}\n')),(0,r.kt)("h3",{id:"confirmation-dialog"},"Confirmation Dialog"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct ContentView: View {\n    var entry: ButtonEntry = .sample\n    @State private var showConfirmation: Bool = false\n\n    var body: some View {\n        ButtonEntryCell(entry)\n            .contextMenu {\n                Section {\n                    Button("Open") {\n                        // ...\n                    }\n                    Button("Delete...", role: .destructive) {\n                        showConfirmation = true\n                        // ...\n                    }\n                }\n\n                Section {\n                    Button("Archive") {}\n\n                    Menu("Move to") {\n                        ForEach(Jar.allJars) { jar in\n                            Button("\\(jar.name)") {\n                                //addTo(jar)\n                            }\n                        }\n                    }\n                }\n            }\n            .confirmationDialog(\n                "Are you sure you want to delete \\(entry.name)?",\n                isPresented: $showConfirmation\n            ) {\n                Button("Delete", role: .destructive) {\n                    // delete the entry\n                }\n            } message: {\n                Text("Deleting \\(entry.name) will remove it from all of your jars.")\n            }\n    }\n}\n')),(0,r.kt)("h2",{id:"14-control-group-backforward-control"},"14. Control Group: back/forward control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct ContentView: View {\n    @State var current: String = "More buttons"\n    @State var history: [String] = ["Text and keyboard", "Advanced graphics", "Beyond lists", "Better lists"]\n    @State var forwardHistory: [String] = []\n\n    var body: some View {\n        Color.clear\n            .toolbar{\n                ToolbarItem(placement: .navigation) {\n                    ControlGroup {\n                        Menu {\n                            ForEach(history, id: \\.self) { previousSection in\n                                Button(previousSection) {\n                                    goBack(to: previousSection)\n                                }\n                            }\n                        } label: {\n                            Label("Back", systemImage: "chevron.backward")\n                        } primaryAction: {\n                            goBack(to: history[0])\n                        }\n                        .disabled(history.isEmpty)\n\n                        Menu {\n                            ForEach(forwardHistory, id: \\.self) { nextSection in\n                                Button(nextSection) {\n                                    goForward(to: nextSection)\n                                }\n                            }\n                        } label: {\n                            Label("Forward", systemImage: "chevron.forward")\n                        } primaryAction: {\n                            goForward(to: forwardHistory[0])\n                        }\n                        .disabled(forwardHistory.isEmpty)\n                    }\n                    .controlGroupStyle(.navigation)\n                }\n            }\n            .navigationTitle(current)\n    }\n\n    private func goBack(to section: String) {\n        guard let index = history.firstIndex(of: section) else { return }\n        forwardHistory.insert(current, at: 0)\n        forwardHistory.insert(contentsOf: history[...history.index(before: index)].reversed(), at: 0)\n        history.removeSubrange(...index)\n        current = section\n    }\n\n    private func goForward(to section: String) {\n        guard let index = forwardHistory.firstIndex(of: section) else { return }\n        history.insert(current, at: 0)\n        history.insert(contentsOf: forwardHistory[...forwardHistory.index(before: index)].reversed(), at: 0)\n        forwardHistory.removeSubrange(...index)\n        current = section\n    }\n}\n')))}p.isMDXComponent=!0}}]);